From Coq Require Import Bool.Bool.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.EqNat. Import Nat.
From Coq Require Import Lia.
From Coq Require Import Lists.List. 
Import ListNotations.
From Coq Require Import Strings.String.
From LF Require Import Maps.
From Coq Require Import List.
Require Import Ascii String.
Require Import Program.
Require Import String.
Require Import Coq.Classes.RelationClasses.


Inductive Element : Type :=
    | H | He | Li | Be | B | C | N | O | F | Ne | Na | Mg | Al | Si | P | Cl | Ar | K | Ca
    | Ga | Ge | As | Se | Br | Kr | Rb | Sr | In | Sn | Sb | Te | I | Xe | Cs | Ba | Tl | Pb
    | Bi | Po | At | Rn.


  Inductive system : Type :=
    | Sys : nat -> nat -> nat -> system.


(* Boolean equality function for B18 *)

Definition left_middle_add (sys: system) : system :=
  match sys with
  | Sys l m r => Sys (S(l)) (S(m)) r
  end.

Definition right_middle_add (sys: system) : system :=
  match sys with
  | Sys l m r => Sys l (S(m)) (S(r))
  end.

Definition is_complete_state_system (sys: system) : bool :=
  match sys with
  | Sys l m r =>
    (l =? 8) && (m =? 8) && (r =? 8)
  end.


Definition example_system : system := Sys 1 2 3.

Definition modified_system : system := left_middle_add(example_system).
Definition modified_system': system := right_middle_add(example_system).

Compute modified_system.
Compute modified_system'.
Compute is_complete_state_system (Sys 1 2 3).
Compute is_complete_state_system (Sys 8 8 8).

Fixpoint make_left_eight (sys: system) (max_steps : nat) : system :=
    match max_steps with
    | 0 => sys  (* Avoid infinite recursion *)
    | S n => match sys with
        | Sys l m r =>
        match l with
            | 8 => sys (* Left value is already 8, return the system *)
            | _ => make_left_eight (Sys (S(l)) (S(m)) r) n (* Increment left and middle, then recurse *)
            end
        end
    end.




Fixpoint make_right_eight (sys: system) (max_steps : nat) : system :=
    match max_steps with
    | 0 => sys  (* Avoid infinite recursion *)
    | S n => match sys with
        | Sys l m r =>
        match r with
            | 8 => sys (* Left value is already 8, return the system *)
            | _ => make_right_eight (Sys l (S(m)) (S(r))) n (* Increment left and middle, then recurse *)
            end
        end
    end.

(* Function to check if the middle is Eight *)
Definition is_eight_eight_eight_possible (sys: system) (max_steps: nat) : bool :=
  let sys_left_eight := make_left_eight sys max_steps in
  let sys_right_eight := make_right_eight sys_left_eight max_steps in
  match sys_right_eight with
  | Sys l m _ => (m =? 8)
  end.

(* Example system *)
Definition example_system2 : system := Sys 5 4 7.

(* Check if it's possible to get to "eight-eight-eight" *)
Compute is_eight_eight_eight_possible (example_system2) (100).


Definition correct_system1 : system := Sys 5 4 7.
Definition correct_system2 : system := Sys 6 4 6.
Definition correct_system3 : system := Sys 6 5 7.
Definition correct_system4 : system := Sys 7 4 5.
Definition correct_system5 : system := Sys 7 5 6.
Definition correct_system6 : system := Sys 7 6 7.

Definition incorrect_system1 : system := Sys 7 4 7.
Definition incorrect_system2 : system := Sys 1 1 2.

Compute is_eight_eight_eight_possible correct_system1 100.
Compute is_eight_eight_eight_possible correct_system2 100.
Compute is_eight_eight_eight_possible correct_system3 100.
Compute is_eight_eight_eight_possible correct_system4 100.
Compute is_eight_eight_eight_possible correct_system5 100.
Compute is_eight_eight_eight_possible correct_system6 100.

Compute is_eight_eight_eight_possible incorrect_system1 100.
Compute is_eight_eight_eight_possible incorrect_system2 100.


Definition possible_correct := [correct_system1; correct_system2; correct_system3;
   correct_system4; correct_system5; correct_system6].

Definition is_system_in_possible_correct (sys : system) : bool :=
    match sys with 
    | Sys _ _ 0 => false
    | Sys _ 0 _ => false
    | Sys 0 _ _ => false
    | Sys 5 4 7 => true
    | Sys 6 4 6 => true
    | Sys 6 5 7 => true
    | Sys 7 4 5 => true
    | Sys 7 5 6 => true
    | Sys 7 6 7 => true
    | Sys _ _ _ => false
    end.

  Definition system_eq (sys1 sys2 : system) : bool :=
      match sys1, sys2 with
      | Sys l1 m1 r1, Sys l2 m2 r2 =>
        (l1 =? l2) && (m1 =? m2) && (r1 =? r2)
      end.

Fixpoint member (v : system) (s : list system) : bool :=
  match s with 
  | nil => false
  | x :: y => if system_eq v x then true else member v y
  end.
