Require Import Bool.
Require Import Nat.
Require Import List.  
Import ListNotations.
Require Import Lia.

Inductive B18 : Type :=
    | One
    | Two
    | Three
    | Four
    | Five
    | Six
    | Seven
    | Eight
    | Null
    .

Definition system : Type := (B18 * B18 * B18).

Definition increment (x: B18) : B18 :=
  match x with
  | One => Two
  | Two => Three
  | Three => Four
  | Four => Five
  | Five => Six
  | Six => Seven
  | Seven => Eight
  | Eight => Null
  | Null => Null
  end.

(* Boolean equality function for B18 *)
Definition eqb_B18 (x y: B18) : bool :=
  match (x, y) with
  | (One, One) => true
  | (Two, Two) => true
  | (Three, Three) => true
  | (Four, Four) => true
  | (Five, Five) => true
  | (Six, Six) => true
  | (Seven, Seven) => true
  | (Eight, Eight) => true
  | (Null, Null) => true
  | _ => false
  end.

Definition left_middle_add (sys: system) : system :=
  match sys with
  | (l, m, r) =>
    if eqb_B18 l Null || eqb_B18 m Null || eqb_B18 r Null then
      (Null, Null, Null) 
    else
      (increment l, increment m, r)  
  end.

Definition right_middle_add (sys: system) : system :=
  match sys with
  | (l, m, r) =>
    if eqb_B18 l Null || eqb_B18 m Null || eqb_B18 r Null then
      (Null, Null, Null) 
    else
      (l, increment m, increment r)  
  end.

Definition is_left_eight (sys: system) : bool :=
  let '(l, _, _) := sys in
  eqb_B18 l Eight.

Definition is_middle_eight (sys: system) : bool :=
  let '(_, m, _) := sys in
  eqb_B18 m Eight.

Definition is_right_eight (sys: system) : bool :=
  let '(_, _, r) := sys in
  eqb_B18 r Eight.

Definition is_complete_state_system (sys: system) : bool :=
  match sys with
  | (l, m, r) =>
    eqb_B18 l Eight && eqb_B18 m Eight && eqb_B18 r Eight
  end.

Definition example_system : system := (One, Two, Three).
Definition modified_system : system := left_middle_add(example_system).
Definition modified_system': system := right_middle_add(example_system).

Compute modified_system.
Compute modified_system'.
Compute is_complete_state_system (One, Two, Three).
Compute is_complete_state_system (Eight, Eight, Eight).

Fixpoint make_left_eight (sys: system) (max_steps: nat) : system :=
  match max_steps with
  | 0 => sys  (* Avoid infinite recursion *)
  | S n =>
    let '(l, m, r) := sys in
    if eqb_B18 l Eight then
      sys
    else if eqb_B18 l Null then
      (Null, Null, Null)
    else
      make_left_eight (increment l, increment m, r) n
  end.

Fixpoint make_right_eight (sys: system) (max_steps: nat): system :=
  match max_steps with
  | 0 => sys  (* Avoid infinite recursion *)
  | S n =>
    let '(l, m, r) := sys in
    if eqb_B18 r Eight then
      sys
    else if eqb_B18 r Null then
      (Null, Null, Null)
    else
      make_right_eight (l, increment m, increment r) n
  end.

Definition is_eight_eight_eight_possible (sys: system) (max_steps: nat) : bool :=
  let sys_left_eight := make_left_eight sys max_steps in
  let sys_right_eight := make_right_eight sys_left_eight max_steps in
  match sys_right_eight with
  | (l, m, _) => eqb_B18 m Eight
  end.

(* Define the six correct systems *)
Definition correct_system1 : system := (Five, Four, Seven).
Definition correct_system2 : system := (Six, Four, Six).
Definition correct_system3 : system := (Six, Five, Seven).
Definition correct_system4 : system := (Seven, Four, Five).
Definition correct_system5 : system := (Seven, Five, Six).
Definition correct_system6 : system := (Seven, Six, Seven).

Definition correct_system7 : system := (Five, Two, Five).
Compute is_eight_eight_eight_possible correct_system7 10.

Theorem correct_systems_lead_to_eight_eight_eight : 
  is_eight_eight_eight_possible correct_system1 10 = true /\
  is_eight_eight_eight_possible correct_system2 10 = true /\
  is_eight_eight_eight_possible correct_system3 10 = true /\
  is_eight_eight_eight_possible correct_system4 10 = true /\
  is_eight_eight_eight_possible correct_system5 10 = true /\
  is_eight_eight_eight_possible correct_system6 10 = true.
Proof.
  split.
  - compute. reflexivity.
  - split.
    + compute. reflexivity.
    + split.
      * compute. reflexivity.
      * split.
        -- compute. reflexivity.
        -- split.
           ++ compute. reflexivity.
           ++ split.
Qed.
