From Coq Require Import Bool.Bool.
From Coq Require Import Init.Nat.
From Coq Require Import Arith.Arith.
From Coq Require Import Arith.EqNat. Import Nat.
From Coq Require Import Lia.
From Coq Require Import Lists.List. 
Import ListNotations.
From Coq Require Import Strings.String.
From LF Require Import Maps.
From Coq Require Import List.
Require Import Ascii String.
Require Import Program.

Inductive Element : Type :=
    | H | He | Li | Be | B | C | N | O | F | Ne | Na | Mg | Al | Si | P | S | Cl | Ar | K | Ca
    | Ga | Ge | As | Se | Br | Kr | Rb | Sr | In | Sn | Sb | Te | I | Xe | Cs | Ba | Tl | Pb
    | Bi | Po | At | Rn.


Inductive Ion : Type :=
    | VI (e : Element) (n : nat).
(* N represents the charge *)
  
Definition OuterShell (i : Ion) : nat :=
    match i with
    | VI H _ => 2
    | VI He _ => 2
    | VI _ _ => 8
    end.
  
Inductive Bond : Type :=
   | Single.

Definition getElement (ion : Ion) : Element :=
    match ion with
    | VI e _ => e
    end.

Definition getValence (ion : Ion) : nat :=
    match ion with
    | VI _ v => v
    end.

  
  (* Helper function to check if an ion is fully bonded *)
Inductive fully_bonded : Ion -> nat -> Prop :=
    | ion' (e: Element) (v bond:nat)
      : v + bond = (OuterShell (VI e v)) -> fully_bonded (VI e v) bond.

Inductive BondOption : Type :=
    | Some (n m : nat)
    | None.

  (* Function to find the correct orientation and bonds for the molecule *)

Definition orient_molecule (m1 m2 m3 : Ion) : BondOption :=
    match getValence m1 with
    | 5 => match getValence m2 with 
        | 4 => if ((getValence m3) =? 7) then Some 3 1 else None
        | _ => None
        end
    | 6 => match getValence m2 with 
        | 4 => if ((getValence m3) =? 6) then Some 2 2 else None
        | 5 => if ((getValence m3) =? 7) then Some 2 1 else None
        | _ => None
        end
    | 7 => match getValence m2 with
        | 4 => if ((getValence m3) =? 5) then Some 1 2 else None
        | 5 => if ((getValence m3) =? 6) then Some 1 2 else None
        | 6 => if ((getValence m3) =? 7) then Some 1 1 else None
        | _ => None
        end
    | _ => None
    end.

Theorem orient_molecule_fully_bonded :
  forall (m1 m2 m3 : Ion) (n m : nat),
    orient_molecule m1 m2 m3 = Some n m ->
    fully_bonded m1 n /\ fully_bonded m2 (n+m) /\ fully_bonded m3 m.
Proof.









